 
 <main role="main" class="container">
      <div class="row">
        <div class="col-md-8 blog-main">
          <h1 class="pb-3 mb-4 font-italic border-bottom">
          <strong>Java</strong> 
          </h1>

          <div class="blog-post alert alert-dark">
            <h2 class="blog-post-title alert alert-warning">What is Java</h2>
            <p class="blog-post-meta">June 30, 2018 by <a href="#">Amxdp18</a></p>

            <p>Java is a programming language and a platform.

      Java is a high level, robust, secured and object-oriented programming language.

      Platform: Any hardware or software environment in which a program runs, is known as a platform. Since Java has its own runtime environment (JRE) and API, it is called platform.</p>
            <hr>
            
            <blockquote>
              <p>Curabitur blandit tempus porttitor. <strong>Nullam quis risus eget urna mollis</strong> ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.</p>
            </blockquote>
            <p>Etiam porta <em>sem malesuada magna</em> mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.</p>
            <h2 class="alert alert-warning"> Where it is used</h2>
            <p>According to Sun, 3 billion devices run java. There are many devices where Java is currently used. Some of them are as follows:
    1.Desktop Applications such as acrobat reader, media player, antivirus etc.<br>
    2.Web Applications such as irctc.co.in, javatpoint.com etc.<br>
    3.Enterprise Applications such as banking applications.<br>
    4.Mobile<br>
    5.Embedded System<br>
    6.Smart Card<br>
    7.Robotics<br>
    8.Games etc.<br>
</p>
            <h3 class="alert alert-warning">Example</h3>
            <p>Let's have a quick look at java programming example. A detailed description of hello Java example is given in next page.</p>
            <pre class="alert alert-primary"><code>    class Simple{  
        public static void main(String args[]){  
         System.out.println("Hello Java");  
        }  
    }  </code></pre>
        
            <h3 class="alert alert-warning">Features of Java</h3>
            <p>The main objective of Java programming language creation was to make it portable, simple and secure programming language. Apart from this, there are also some awesome features which play important role in the popularity of this language. The features of Java are also known as java buzzwords.</p>
            <ul>
             
    <li>Simple</li>
    <li>Object-Oriented</li>
    <li>Portable</li>
    <li>Platform independent</li>
    <li>Secured</li>
    <li>Robust</li>
    <li>Architecture neutral</li>
    <li>Interpreted</li>
    <li>High Performance</li>
    <li>Multithreaded</li>
    <li>Distributed</li>
    <li>Dynamic</li>

            </ul>
            <h3 class="alert alert-warning">Platform Independent</h3>
            <p>Java is platform independent because it is different from other languages like C, C++ etc. which are compiled into platform specific machines while Java is a write once, run anywhere language. A platform is the hardware or software environment in which a program runs.

There are two types of platforms software-based and hardware-based. Java provides software-based platform.
The Java platform differs from most other platforms in the sense that it is a software-based platform that runs on the top of other hardware-based platforms. It has two components: </p>
            <ol>
              <li>Runtime Environment</li>
              <li>API(Application Programming Interface)</li>
             
            </ol>
            <p>Java code can be run on multiple platforms e.g. Windows, Linux, Sun Solaris, Mac/OS etc. Java code is compiled by the compiler and converted into bytecode. This bytecode is a platform-independent code because it can be run on multiple platforms i.e. Write Once and Run Anywhere(WORA).</p>
          </div><!-- /.blog-post -->

          <div class="blog-post alert alert-dark">
            <h2 class="blog-post-title alert alert-primary">Simple Program of Java</h2>
            <p class="blog-post-meta">December 23, 2013 by <a href="#">Jacob</a></p>
            <pre class="alert alert-primary"><code>class Simple{  
        public static void main(String args[]){  
         System.out.println("Hello Java");  
        }  
    }  
            </code></pre>

            <p>save this file as Simple.java
To compile:	javac Simple.java
To execute:	java Simple</p>
<pre>
<code>
Output:Hello Java
</code>
</pre>
            <blockquote>
             <h3 class="alert alert-primary">Parameters used in first java program</h3>  
    <ol>
    <li><strong>class</strong> keyword is used to declare a class in java.</li>
   <li><strong> public </strong>keyword is an access modifier which represents visibility, it means it is visible to all.</li>
   <li> <strong>static</strong> is a keyword, if we declare any method as static, it is known as static method. The core advantage of static method is that there is no need to create object to invoke the static method. The main method is executed by the JVM, so it doesn't require to create object to invoke the main method. So it saves memory.</li>
   <li> <strong>void</strong> is the return type of the method, it means it doesn't return any value.</li>
   <li> <strong>main</strong> represents the starting point of the program.
    String[] args is used for command line argument. We will learn it later.</li>
    <li><strong>System.out.println()</strong> is used print statement. We will learn about the internal working of System.out.println statement later.</li>
</ol>
          </div><!-- /.blog-post -->

          <div class="blog-post alert alert-dark">
            <h2 class="blog-post-title alert alert-warning">Java Variables</h2>
            <p class="blog-post-meta">December 14, 2013 by <a href="#">Chris</a></p>

            <p>A variable is a container which holds the value while the java program is executed. A variable is assigned with a datatype.

Variable is a name of memory location. There are three types of variables in java: local, instance and static.


There are two types of data types in java: primitive and non-primitive.</p>
            
           <pre class="alert alert-primary">
           <code>class A{  
                    int data=50;//instance variable  
                    static int m=100;//static variable  
                      void method(){  
                           int n=90;//local variable  
                                   }  
                   }//end of class  
           </code>
           </pre>

 <h1 class="alert alert-warning">Java Keywords </h1>
 <table class="table table-striped">
    <thead>
      <tr>
        <th>Keyword</th>
        <th>Description</th>
        <th>Example</th>
      </tr>
    </thead>
    <tbody>

      <tr>
        <td>abstract</td>
        <td>an abstract class or method</td>
        <td>abstract class Writable {
             public abstract void
             write(Writer out);
             public void save(String
             filename) { ... }}
        </td>
      </tr>

      <tr>
        <td>assert</td>
        <td>with assertions enabled, throws an error if condition       not fulfilled</td>
        <td>assert param != null;
            Note: Run with -ea to enable assertions</td>
      </tr>

      <tr>
        <td>boolean</td>
        <td>the Boolean type with values true and false</td>
        <td>boolean more = false;</td>
      </tr>

      <tr>
        <td>break</td>
        <td>breaks out of a switch or loop</td>
        <td>while ((ch = in.next()) !=-1) {
            if (ch == '\n') break;
            process(ch);
             }
            Note: Also see switch
        </td>
      </tr>

      <tr>
        <td>byte</td>
        <td>the 8-bit integer type</td>
        <td>byte b = -1; // Not the same as 0xFF
            Note: Be careful with bytes < 0
        </td>
      </tr>

      <tr>
        <td>case</td>
        <td>a case of a switch</td>
        <td>see switch</td>
      </tr>

      <tr>
        <td>catch</td>
        <td>the clause of a try block catching an exception</td>
        <td>see try</td>
      </tr>

      <tr>
        <td>char</td>
        <td>the Unicode character type</td>
        <td>char input = 'Q';</td>
      </tr>

      <tr>
        <td>class</td>
        <td>defines a class type</td>
        <td>class Person {
               private String name;
               public Person(String aName) {
                         name = aName;
                          }
               public void print() {
              System.out.println(name);}}
        </td>
      </tr>

      <tr>
        <td>continue</td>
        <td>continues at the end of a loop</td>
        <td>while ((ch = in.next()) !=-1) {
           if (ch == ' ') continue;
            process(ch);
          }</td>
      </tr>

      <tr>
        <td>default</td>
        <td>1) the default clause of a switch</td>
        <td>see switch</td>
      </tr>

      <tr>
        <td>default (cont.)</td>
      <td>2) denotes default implementation of an interface method</td>
        <td>public interface
Collection<E> {
@Override
default Spliterator<E>
spliterator() {
return Spliterators.
spliterator(this, 0);
}
}</td>
    </tr>

      <tr>
        <td>do</td>
        <td>the top of a do/while loop</td>
        <td>do {
               ch = in.next();
               } while (ch == ' ');</td>
      </tr>

      <tr>
        <td>double</td>
        <td>the doubleprecision floatingnumber type</td>
        <td>double oneHalf = 0.5;</td>
      </tr>

      <tr>
        <td>else</td>
        <td>the else clause of an if statement</td>
        <td>see if</td>
      </tr>

      <tr>
        <td>enum</td>
        <td>an enumerated type</td>
        <td>enum Mood { SAD, HAPPY };</td>
      </tr>

      <tr>
   <td> for</td>
<td>a loop type</td>
<td>for (int i = 10; i >= 0; i--)
System.out.println(i);
for (String s : line.split("\\s+"))
System.out.println(s);
Note: In the “generalized” for loop, the expression after the : must be an array or an Iterable</td>
      </tr>

  <tr>
<td>if</td>
<td>a conditional statement</td>
<td>if (input == 'Q')
System.exit(0);
else
more = true;</td>
      </tr>
     
      <tr>
<td>implements</td>
<td>defines the interface(s) that a class implements</td>
<td>class Student
implements Printable {
...
}</td>
    </tr>
     
     <tr>
<td>import</td>
<td>imports a package</td>
<td>import java.util.ArrayList;
import com.dzone.refcardz.*;</td>  
    </tr>
 
 <tr>
 <td>instanceof</td>
<td>tests if an object is an instance of a class</td>
<td>if (fred instanceof Student)
value = ((Student) fred).getId();
Note: null instanceof T is always false</td>  
  </tr>
     
      <tr>
<td>int</td>
<td>the 32-bit integer type</td>
<td>int value = 0;</td>
      </tr>
  
  <tr>
<td>interface</td>
<td>an abstract type with methods that a class can implement</td>
<td>interface Printable {
void print();
}</td>
      </tr>
      
  <tr>
<td>long</td>
<td>the 64-bit long integer type</td>
<td>long worldPopulation = 6710044745L;</td>
  </tr>
  
  <tr>
<td>native</td>
<td>a method implemented by the host system</td>
  </tr>
  
  <tr>
<td>new</td>
<td>allocates a new object or array</td>
<td>Person fred = new Person("Fred");</td>
  </tr>
  
  <tr>
<td>null</td>
<td>a null reference</td>
<td>Person optional = null;</td> 
  </tr>
    
  <tr>
<td>package</td>
<td>a package of classes</td>
<td>package com.dzone.refcardz;</td>
  </tr>
     
 <tr>
<td>private</td>
<td>a feature that is accessible only by methods of this class</td>
<td>see class</td>
      </tr>

 <tr>
<td>
protected</td>
<td>a feature that is accessible only by methods of this class, its children, and other classes in the same package</td>
<td>class Student {
protected int id;
...
}</td>
      </tr>

  <tr>
<td>
public</td>
<td>a feature that is accessible by methods of all classes</td>
<td>see class</td>
 </tr>

<tr>
<td>
return</td>
<td>returns from a method</td>
<td>int getId() { return id; }
   </td> 
 </tr>
      
      <tr>
<td>short</td>
<td>the 16-bit integer type</td>
<td>short skirtLength = 24;</td>  
    </tr>

<tr>
 <td>static</td>
<td>a feature that is unique to its class, not to objects of its class</td>
<td>public class WriteUtil {
public static void write(Writable[] ws,
String filename);
public static final String DEFAULT_EXT = ".dat";
 </td>
  </tr>

<tr>
<td>strictfp</td>
<td>Use strict rules for floating-point computations</td>
</tr>

<tr>
<td>super</td>
<td>invoke a superclass constructor or method</td>
<td>public Student(String name, int anId) {
super(name); id = anId;
}
public void print() {
super.print();
System.out.println(id);
}</td>
</tr>

<tr>
<td>switch</td>
<td>a selection statement</td>
<td>switch (ch) {
case 'Q':
case 'q':
more = false; break;
case ' ';
break;
default:
process(ch); break;
}
Note: If you omit a break, processing continues with the next case.
</td>
</tr>

<tr>
<td>synchronized</td>
<td>a method or code block that is atomic to a thread</td>
<td>public synchronized void addGrade(String gr) {
grades.add(gr);
}</td>
</tr>

<tr>
<td>this</td>
<td>the implicit argument of a method, or a constructor of this class</td>
<td>public Student(String id) {this.id = id;}
public Student() { this(""); }
</td>
</tr>

<tr>
<td>throw</td>
<td>throws an exception</td>
<td>if (param == null)
throw new IllegalArgumentException();
</td>
</tr>

<tr>
<td>throws</td>
<td>the exceptions that a method can throw</td>
<td>public void print()throws PrinterException, IOException
</td>
</tr>

<tr>
<td>transient</td>
<td>marks data that should not be persistent</td>
<td>class Student {
private transient Data cachedData;
...
}</td>
</tr>

<tr>
<td>try</td>
<td>a block of code that traps exceptions</td>
<td>try {
try {
fred.print(out);
} catch (PrinterException ex) {
ex.printStackTrace();
}
} finally {
out.close();
}</td>
</tr>

<tr>
<td>void</td>
<td>denotes a method that returns no value</td>
<td>public void print() { ... }</td>
</tr>

<tr>
<td>
volatile</td>
<td>ensures that a field is coherently accessed by multiple threads</td>
<td>class Student {
private volatile int nextId;
...
}
</td>
</tr>

<tr>
<td>while</td>
<td>a loop</td>
<td>while (in.hasNext()) 
process(in.next());
</td>
</tr>

    </tbody>
  </table>
 <!--end of Keyword cat-->

<hr>
<h1 class="alert alert-success">Primitive Type</h1>
   <table class="table table-striped">
    <thead>
      <tr>
        <th>Type</th>
        <th>Size</th>
        <th>Range</th>
        <th>Notes</th>
      </tr>
    </thead>
    <tbody>
      <tr>
      <td> int</td>
      <td>4 bytes</td>
      <td>–2,147,483,648 to 2,147,483, 647
(just over 2 billion)</td>
<td>The wrapper type is Integer. Use BigInteger for arbitrary precision integers</td></tr>
<tr>
<td>short</td>
<td>2 bytes</td>
<td>–32,768 to 32,767</td>
</tr>
<tr>
 <td>long </td>
 <td>8 bytes </td>
 <td>–9,223,372,036,854,775,808 to
9,223,372,036,854,775,807 </td>
 <td>Literals end with L (e.g. 1L) </td>
</tr>
<tr> <td>
byte </td>
 <td>1 byte
–128 to 127 </td>
 <td>Note that the range is not 0 to 255
  </td></tr>
<tr>
 <td>
float </td>
 <td>4 bytes </td>
 <td>approximately
±3.40282347E+38F (6–7
significant decimal digits) </td>
 <td>Literals end with F (e.g. 0.5F) </td></tr>
<tr>
 <td>
double </td>
 <td>8 bytes </td>
 <td>approximately
±1.79769313486231570E+308
(15 significant decimal digits) </td>
 <td>Use BigDecimal for arbitrary precision floating-point numbers </td>
</tr>
<tr>
 <td>char </td>
 <td>2 bytes </td>
 <td>\u0000 to \uFFFF </td>
 <td>The wrapper type is Character. Unicode characters > U+FFFF require two char values</td>
 </tr>
 <tr>
 <td>
boolean</td>
<td>true or false </td> 
      </tr>
    </tbody>
  </table>

<h1 class="alert alert-warning">LAMBDA EXPRESSIONS</h1>

<h3 class="badge badge-pill badge-success">FUNCTIONAL INTERFACES</h3>
Interfaces with a single abstract method. Example:

<pre class="alert alert-primary"><code>@FunctionalInterface
public interface Predicate<T> {
boolean test(T t);
}</code></pre>
Implementations of this interface can be supplied in-line as a
lambda expression:
<ul>
<li>• Anonymous implementations of functional interfaces</li>
<li>• Parameters and body are separated by an arrow sign ("->")</li>
<li>• Parameters of the abstract method are on the left of the arrow</li>
<li>• The implementation is on the right of the arrow</li>
</ul>
  <h3 class="alert alert-warning">Typical usage of lambda expressions:</h3>
<pre class="alert alert-primary"><code>JButton button = new JButton("MyButton");
button.addActionListener(event ->
doSomeImportantStuff(event));
</code></pre>
          </div><!-- /.blog-post -->
           <div class="blog-post alert alert-dark">
           <div class="blog title alert alert-success">

<h2>
Flag
</h2>
<table class="table table-striped">
<thead>
<tr>
<td>
Flag
</td>
<td>
Description
</td>
<td>
Example
</td>
</tr>
</thead>
<tbody>

<tr>
<td>+</td> 
<td>Prints sign for positive and negative numbers</td>
 <td>+3333.33</td>
</tr>
<tr>
<td>space </td>
<td>Adds a space before positive numbers</td>
<td> | 3333.33|</td>

</tr>
<tr>

<td>0 </td>
<td>Adds leading zeroes</td>
<td> 003333.33</td>
</tr>

<tr>
<td>-</td>
<td> Left-justifies field</td>
<td> |3333.33 |</td>
</tr>

<tr>
<td>(</td>
<td> Encloses negative number in parentheses </td>
<td>(3333.33)</td>
</tr>
<tr>
<td>,</td>
<td> Adds group separators</td>
<td> 3,333.33</td>
</tr>
<tr>
<td># 
(for f
format)</td>
<td>Always includes a decimal point</td>
<td> 3,333.</td>
</tr>
<tr>
<td># (for x or
o format)</td>
<td>Adds 0x or 0 prefix</td>
<td> 0xcafe</td>
</tr>
<tr>
<td>$</td>
<td> Specifies the index of the argument to be
formatted;</td>
<td> for example, %1$d %1$x prints the
first argument in decimal and hexadecimal
159 9F</td>
</tr>
<tr>
<td><</td>
<td> Formats the same value as the previous
specification;</td>
<td> for example, %d %x prints the
same number in decimal and hexadecimal
159 9F</td>
</tr>



</tbody>

</table>
           </div>
           </div>






          <nav class="blog-pagination">
            <a class="btn btn-outline-primary" href="#">Older</a>
            <a class="btn btn-outline-secondary " href="#">Newer</a>
          </nav>

        </div><!-- /.blog-main -->

        <aside class="col-md-4 blog-sidebar">
          <div class="p-3 mb-3 bg-light rounded">
            <h4 class="font-italic">Adventise</h4>
            <p class="mb-0">Etiam porta <em>sem malesuada magna</em> mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.</p>
          </div>

          <div class="p-3">
            <h4 class="font-italic">Archives</h4>
            <ol class="list-unstyled mb-0">
              <li><a href="#">March 2014</a></li>
              <li><a href="#">February 2014</a></li>
              <li><a href="#">January 2014</a></li>
              <li><a href="#">December 2013</a></li>
              <li><a href="#">November 2013</a></li>
              <li><a href="#">October 2013</a></li>
              <li><a href="#">September 2013</a></li>
              <li><a href="#">August 2013</a></li>
              <li><a href="#">July 2013</a></li>
              <li><a href="#">June 2013</a></li>
              <li><a href="#">May 2013</a></li>
              <li><a href="#">April 2013</a></li>
            </ol>
          </div>

          <div class="p-3">
            <h4 class="font-italic">Elsewhere</h4>
            <ol class="list-unstyled">
              <li><a href="#">GitHub</a></li>
              <li><a href="#">Twitter</a></li>
              <li><a href="#">Facebook</a></li>
            </ol>
          </div>
        </aside><!-- /.blog-sidebar -->

      </div><!-- /.row -->

    </main><!-- /.container -->
